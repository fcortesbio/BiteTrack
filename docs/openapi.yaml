openapi: 3.1.0
info:
  title: BiteTrack API
  version: 1.0.0
  description: >
    BiteTrack is a Dockerized Express.js RESTful API designed for small food
    businesses to manage sellers, products, customers, and sales.
    Authentication is JWT-based with role-based access control.
servers:
  - url: http://localhost:3000/bitetrack

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Seller:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        dateOfBirth: { type: string, format: date }
        role: { type: string, enum: [user, admin, superadmin] }
        createdBy: { type: string }
        activatedAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [firstName, lastName, email, dateOfBirth, role]

    PendingSeller:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        dateOfBirth: { type: string, format: date }
        createdAt: { type: string, format: date-time }
        createdBy: { type: string }
        activatedAt: { type: string, format: date-time, nullable: true }
      required: [firstName, lastName, email, dateOfBirth]

    Customer:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phoneNumber: { type: string }
        email: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        lastTransaction: { type: string, format: date-time, nullable: true }
      required: [firstName, lastName, phoneNumber]

    Product:
      type: object
      properties:
        id: { type: string }
        productName: { type: string }
        description: { type: string, nullable: true }
        count: { type: integer, minimum: 0 }
        price: { type: number, minimum: 0 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [productName, count, price]

    Sale:
      type: object
      properties:
        id: { type: string }
        customerId: { type: string }
        sellerId: { type: string }
        products:
          type: array
          items:
            type: object
            properties:
              productId: { type: string }
              quantity: { type: integer, minimum: 1 }
              priceAtSale: { type: number, minimum: 0 }
            required: [productId, quantity, priceAtSale]
        totalAmount: { type: number, minimum: 0 }
        amountPaid: { type: number, minimum: 0 }
        settled: { type: boolean, description: "True if fully paid" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        [customerId, sellerId, products, totalAmount, amountPaid, settled]

    SaleWithPopulatedFields:
      type: object
      properties:
        id: { type: string }
        customerId:
          type: object
          properties:
            _id: { type: string }
            firstName: { type: string }
            lastName: { type: string }
            email: { type: string, format: email }
          required: [_id, firstName, lastName, email]
        sellerId:
          type: object
          properties:
            _id: { type: string }
            firstName: { type: string }
            lastName: { type: string }
            email: { type: string, format: email }
          required: [_id, firstName, lastName, email]
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: object
                properties:
                  _id: { type: string }
                  name: { type: string }
                  price: { type: number, minimum: 0 }
                required: [_id, name, price]
              quantity: { type: integer, minimum: 1 }
              priceAtSale: { type: number, minimum: 0 }
            required: [productId, quantity, priceAtSale]
        totalAmount: { type: number, minimum: 0 }
        amountPaid: { type: number, minimum: 0 }
        settled: { type: boolean, description: "True if fully paid" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        [customerId, sellerId, products, totalAmount, amountPaid, settled]

    PaginationMetadata:
      type: object
      properties:
        currentPage: { type: integer, minimum: 1 }
        totalPages: { type: integer, minimum: 0 }
        totalTransactions: { type: integer, minimum: 0 }
        limit: { type: integer, minimum: 1, maximum: 100 }
        hasNextPage: { type: boolean }
        hasPrevPage: { type: boolean }
      required: [currentPage, totalPages, totalTransactions, limit, hasNextPage, hasPrevPage]

    CustomerTransactionsResponse:
      type: object
      properties:
        customer: { $ref: "#/components/schemas/Customer" }
        transactions:
          type: array
          items: { $ref: "#/components/schemas/SaleWithPopulatedFields" }
        pagination: { $ref: "#/components/schemas/PaginationMetadata" }
      required: [customer, transactions, pagination]

    SalesPaginationMetadata:
      type: object
      properties:
        currentPage: { type: integer, minimum: 1 }
        totalPages: { type: integer, minimum: 0 }
        totalSales: { type: integer, minimum: 0 }
        limit: { type: integer, minimum: 1, maximum: 100 }
        hasNextPage: { type: boolean }
        hasPrevPage: { type: boolean }
      required: [currentPage, totalPages, totalSales, limit, hasNextPage, hasPrevPage]

    SalesFilters:
      type: object
      properties:
        customerId: { type: string }
        sellerId: { type: string }
        settled: { type: boolean }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        dateField: { type: string, enum: [createdAt, updatedAt] }
        sort: { type: string }

    SalesListResponse:
      type: object
      properties:
        sales:
          type: array
          items: { $ref: "#/components/schemas/SaleWithPopulatedFields" }
        pagination: { $ref: "#/components/schemas/SalesPaginationMetadata" }
        filters: { $ref: "#/components/schemas/SalesFilters" }
      required: [sales, pagination, filters]

    PasswordResetToken:
      type: object
      properties:
        token: { type: string }
        sellerId: { type: string }
        expiresAt: { type: string, format: date-time }
      required: [token, sellerId, expiresAt]

    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        statusCode: { type: integer }
      required: [error, message, statusCode]

    ValidationError:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }
        statusCode: { type: integer }
      required: [error, message, statusCode]

    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
      required: [email, password]

    ActivateRequest:
      type: object
      properties:
        email: { type: string, format: email }
        dateOfBirth: { type: string, format: date }
        lastName: { type: string }
        password:
          {
            type: string,
            minLength: 8,
            pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
          }
      required: [email, dateOfBirth, lastName, password]

    TokenResponse:
      type: object
      properties:
        token: { type: string }
        seller: { $ref: "#/components/schemas/Seller" }
      required: [token, seller]

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      summary: Login as seller
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
      responses:
        "200":
          description: JWT token and seller info
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TokenResponse" }
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /auth/activate:
    post:
      summary: Activate pending seller account
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ActivateRequest" }
      responses:
        "201":
          description: Seller activated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Seller" }
        "404":
          description: Pending seller not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /auth/recover:
    post:
      summary: Initiate password recovery (superadmin only)
      tags: [Authentication]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sellerId]
              properties:
                sellerId: { type: string }
      responses:
        "200":
          description: Password reset token generated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PasswordResetToken" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/reset:
    post:
      summary: Reset password with token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, email, dateOfBirth, newPassword]
              properties:
                token: { type: string }
                email: { type: string, format: email }
                dateOfBirth: { type: string, format: date }
                newPassword: { type: string, minLength: 8 }
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        "400":
          description: Invalid token or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/seller-status:
    get:
      summary: Check seller account status by email
      tags: [Authentication]
      description: |
        Check if an email address has an active or pending seller account.
        Useful for client-side login flows to determine whether to show
        activation form or regular login.
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          description: Email address to check
      responses:
        "200":
          description: Account status found
          content:
            application/json:
              schema:
                type: object
                properties:
                  email: { type: string, format: email }
                  status:
                    type: string
                    enum: [active, pending]
                    description: "'active' for existing sellers, 'pending' for unactivated accounts"
                required: [email, status]
        "404":
          description: No account found for this email
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Validation error (invalid email format)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  # Seller Management Endpoints
  /sellers:
    get:
      summary: List all sellers (admin/superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of sellers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Seller" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sellers/pending:
    post:
      summary: Create pending seller (admin/superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, email, dateOfBirth]
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                dateOfBirth: { type: string, format: date }
      responses:
        "201":
          description: Pending seller created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PendingSeller" }
        "400":
          description: Validation error or email already exists
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sellers/{id}:
    patch:
      summary: Self-update seller information
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                dateOfBirth: { type: string, format: date }
                oldPassword: { type: string }
                newPassword: { type: string, minLength: 8 }
      responses:
        "200":
          description: Seller updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Seller" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Unauthorized or invalid old password
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Deactivate seller (superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Seller deactivated
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sellers/{id}/role:
    patch:
      summary: Promote/demote seller role (superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role: { type: string, enum: [user, admin, superadmin] }
      responses:
        "200":
          description: Role updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Seller" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Customer Endpoints
  /customers:
    get:
      summary: List all customers
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Customer" }
    post:
      summary: Create customer
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, phoneNumber]
              properties:
                firstName: { type: string }
                lastName: { type: string }
                phoneNumber: { type: string }
                email: { type: string, format: email }
      responses:
        "201":
          description: Customer created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /customers/{id}:
    patch:
      summary: Update customer
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                phoneNumber: { type: string }
                email: { type: string, format: email }
      responses:
        "200":
          description: Customer updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "404":
          description: Customer not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Remove customer
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Customer removed
        "404":
          description: Customer not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /customers/{id}/transactions:
    get:
      summary: Get customer transaction history
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve a customer's transaction history with pagination and filtering options.
        Returns customer information along with a paginated list of their transactions.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
          description: Customer ID
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number for pagination
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Number of transactions per page
        - name: settled
          in: query
          schema: { type: boolean }
          description: Filter by settlement status (true for paid, false for unpaid)
      responses:
        "200":
          description: Customer transaction history
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CustomerTransactionsResponse" }
        "400":
          description: Invalid pagination parameters
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Customer not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Product Endpoints
  /products:
    get:
      summary: List all products
      tags: [Products]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Product" }
    post:
      summary: Create product
      tags: [Products]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productName, count, price]
              properties:
                productName: { type: string }
                description: { type: string }
                count: { type: integer, minimum: 0 }
                price: { type: number, minimum: 0 }
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /products/{id}:
    patch:
      summary: Update product details or inventory
      tags: [Products]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName: { type: string }
                description: { type: string }
                count: { type: integer, minimum: 0 }
                price: { type: number, minimum: 0 }
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }
        "404":
          description: Product not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Remove product
      tags: [Products]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Product removed
        "404":
          description: Product not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Sales Endpoints
  /sales:
    get:
      summary: List sales with filtering, date range, pagination, and sorting
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve sales with comprehensive filtering options including date ranges,
        pagination, and sorting capabilities. Returns populated customer, seller,
        and product information along with pagination metadata.
      parameters:
        - name: customerId
          in: query
          schema: { type: string }
          description: Filter by customer ID
        - name: sellerId
          in: query
          schema: { type: string }
          description: Filter by seller ID
        - name: settled
          in: query
          schema: { type: boolean }
          description: Filter by settlement status (true for paid, false for unpaid)
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Start date for filtering (ISO 8601 format)
          example: "2024-01-01T00:00:00.000Z"
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: End date for filtering (ISO 8601 format)
          example: "2024-01-31T23:59:59.999Z"
        - name: dateField
          in: query
          schema: { type: string, enum: [createdAt, updatedAt], default: createdAt }
          description: Date field to filter by
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number for pagination
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
          description: Number of records per page
        - name: sort
          in: query
          schema: { type: string }
          description: Sort field and direction (prefix with '-' for descending)
          example: "-createdAt"
      responses:
        "200":
          description: Sales list with pagination and populated references
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SalesListResponse" }
        "400":
          description: Invalid parameters or date format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
    post:
      summary: Create a sale (transactional)
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [customerId, products, amountPaid]
              properties:
                customerId: { type: string }
                products:
                  type: array
                  items:
                    type: object
                    required: [productId, quantity]
                    properties:
                      productId: { type: string }
                      quantity: { type: integer, minimum: 1 }
                amountPaid: { type: number, minimum: 0 }
      responses:
        "201":
          description: Sale created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Sale" }
        "400":
          description: Insufficient inventory or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /sales/{id}:
    get:
      summary: Get sale details
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Sale details
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Sale" }
        "404":
          description: Sale not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Test Data Management Endpoints (Development/Testing Only)
  /test-data/status:
    get:
      summary: Get test data statistics and counts
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Get comprehensive statistics about current test data in the database.
        Only available in non-production environments.
      responses:
        "200":
          description: Test data statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment: { type: string }
                  timestamp: { type: string, format: date-time }
                  counts:
                    type: object
                    properties:
                      customers: { type: integer }
                      products: { type: integer }
                      sales: { type: integer }
                      pendingSellers: { type: integer }
                  salesStatistics:
                    type: object
                    properties:
                      totalSalesValue: { type: number }
                      averageOrderValue: { type: number }
                      settledSales: { type: integer }
                      unsettledSales: { type: integer }
                  recentSales:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        customer: { type: string }
                        seller: { type: string }
                        totalAmount: { type: number }
                        settled: { type: boolean }
                        createdAt: { type: string, format: date-time }
        "403":
          description: Forbidden (disabled in production or insufficient permissions)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /test-data/populate:
    post:
      summary: Populate database with test data
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Populate the database with realistic test data from JSON templates.
        Supports different presets and optional cleanup before population.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                preset:
                  type: string
                  enum: [minimal, dev, full, bulk]
                  default: minimal
                  description: Size of the test dataset
                cleanBefore:
                  type: boolean
                  default: false
                  description: Clean existing data before populating
                verbose:
                  type: boolean
                  default: false
                  description: Enable detailed logging
      responses:
        "201":
          description: Test data populated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      preset: { type: string }
                      timestamp: { type: string, format: date-time }
                      requestedBy: { type: string }
                      requestedByUser: { type: string }
                      counts:
                        type: object
                        properties:
                          customers: { type: integer }
                          products: { type: integer }
                          sales: { type: integer }
                          pendingSellers: { type: integer }
                      sampleIds:
                        type: object
                        properties:
                          firstCustomer: { type: string }
                          firstProduct: { type: string }
                          firstSale: { type: string }
                      statistics:
                        type: object
                        properties:
                          totalSalesValue: { type: number }
                          averageOrderValue: { type: number }
                          settledSales: { type: integer }
                          unsettledSales: { type: integer }
        "400":
          description: Invalid preset or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Forbidden (disabled in production or insufficient permissions)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /test-data/clean:
    delete:
      summary: Clean/remove test data from database
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Selectively remove test data from the database with preservation options.
        Requires explicit confirmation for safety.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [confirmClean]
              properties:
                confirmClean:
                  type: boolean
                  description: Must be true to proceed (safety measure)
                preserveData:
                  type: array
                  items:
                    type: string
                    enum: [customers, products, sales, pendingSellers]
                  description: Array of data types to preserve
      responses:
        "200":
          description: Test data cleaned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      timestamp: { type: string, format: date-time }
                      requestedBy: { type: string }
                      requestedByUser: { type: string }
                      deletedCounts:
                        type: object
                        properties:
                          sales: { type: integer }
                          customers: { type: integer }
                          products: { type: integer }
                          pendingSellers: { type: integer }
                      preserved:
                        type: array
                        items: { type: string }
        "400":
          description: Missing confirmation or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Forbidden (disabled in production or insufficient permissions)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /test-data/reset:
    post:
      summary: Reset database to specific test scenario (SuperAdmin only)
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Reset the entire database to a specific test scenario.
        This is the most destructive operation and requires SuperAdmin privileges.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [confirmReset]
              properties:
                scenario:
                  type: string
                  enum: [clean, minimal, dev, full]
                  default: clean
                  description: Target scenario for reset
                confirmReset:
                  type: boolean
                  description: Must be true to proceed (safety measure)
      responses:
        "200":
          description: Database reset completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      scenario: { type: string }
                      message: { type: string }
                      timestamp: { type: string, format: date-time }
                      requestedBy: { type: string }
                      requestedByUser: { type: string }
                      counts:
                        type: object
                        properties:
                          customers: { type: integer }
                          products: { type: integer }
                          sales: { type: integer }
                          pendingSellers: { type: integer }
        "400":
          description: Missing confirmation or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Forbidden (disabled in production, insufficient permissions, or not SuperAdmin)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sales/{id}/settle:
    patch:
      summary: Settle a sale (update payment)
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amountPaid]
              properties:
                amountPaid: { type: number, minimum: 0 }
      responses:
        "200":
          description: Sale payment updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Sale" }
        "404":
          description: Sale not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Reporting Endpoints
  /reporting/sales/analytics:
    get:
      summary: Generate comprehensive sales analytics
      tags: [Reporting]
      security: [{ bearerAuth: [] }]
      description: |
        Generate comprehensive sales analytics including time-series data,
        top products, customer analytics, and payment statistics.
        Supports flexible time-based grouping for trend analysis.
      parameters:
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Start date for filtering (ISO 8601 format)
          example: "2024-01-01T00:00:00.000Z"
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: End date for filtering (ISO 8601 format)
          example: "2024-01-31T23:59:59.999Z"
        - name: dateField
          in: query
          schema: { type: string, enum: [createdAt, updatedAt], default: createdAt }
          description: Date field to filter by
        - name: groupBy
          in: query
          schema: { type: string, enum: [hour, day, week, month, year], default: day }
          description: Time grouping for trend analysis
      responses:
        "200":
          description: Comprehensive sales analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  period:
                    type: object
                    properties:
                      startDate: { type: string, format: date-time }
                      endDate: { type: string, format: date-time }
                      dateField: { type: string }
                      groupBy: { type: string }
                  summary:
                    type: object
                    properties:
                      totalSales: { type: integer }
                      totalRevenue: { type: number }
                      totalAmountPaid: { type: number }
                      averageOrderValue: { type: number }
                      averageItemsPerOrder: { type: number }
                  timeSeries:
                    type: array
                    items:
                      type: object
                      properties:
                        _id: { type: object }
                        salesCount: { type: integer }
                        revenue: { type: number }
                        averageOrderValue: { type: number }
                  topProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        productName: { type: string }
                        totalQuantitySold: { type: integer }
                        totalRevenue: { type: number }
                        salesCount: { type: integer }
                  customerAnalytics:
                    type: object
                    properties:
                      uniqueCustomers: { type: integer }
                      averageCustomerSpent: { type: number }
                      averageOrdersPerCustomer: { type: number }
                  paymentAnalytics:
                    type: object
                    properties:
                      settled:
                        type: object
                        properties:
                          count: { type: integer }
                          totalAmount: { type: number }
                          totalPaid: { type: number }
                      unsettled:
                        type: object
                        properties:
                          count: { type: integer }
                          totalAmount: { type: number }
                          totalPaid: { type: number }
        "400":
          description: Invalid parameters or date format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /reporting/sales/export:
    get:
      summary: Export sales data as CSV
      tags: [Reporting]
      security: [{ bearerAuth: [] }]
      description: |
        Export sales data in various CSV formats for external analysis.
        Supports detailed transaction data, summary reports, and product performance exports.
      parameters:
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Start date for filtering (ISO 8601 format)
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: End date for filtering (ISO 8601 format)
        - name: dateField
          in: query
          schema: { type: string, enum: [createdAt, updatedAt], default: createdAt }
          description: Date field to filter by
        - name: format
          in: query
          schema: { type: string, enum: [detailed, summary, products], default: detailed }
          description: CSV export format
        - name: customerId
          in: query
          schema: { type: string }
          description: Filter by customer ID
        - name: sellerId
          in: query
          schema: { type: string }
          description: Filter by seller ID
        - name: settled
          in: query
          schema: { type: boolean }
          description: Filter by settlement status
      responses:
        "200":
          description: CSV file download
          content:
            text/csv:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename="bitetrack-sales-detailed-2024-01-01.csv"'
        "400":
          description: Invalid parameters or format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  # Health Check Endpoint
  /health:
    get:
      summary: API health check
      tags: [Health]
      description: |
        Check API server status and connectivity. No authentication required.
        Returns server status, uptime, and current timestamp.
      responses:
        "200":
          description: Server is healthy and operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "OK" }
                  timestamp: { type: string, format: date-time }
                  uptime: { type: number, description: "Server uptime in seconds" }
                required: [status, timestamp, uptime]
