openapi: 3.1.0
info:
  title: BiteTrack API
  version: 2.1.0
  description: >
    BiteTrack is a comprehensive food business management platform with enterprise-grade
    features including inventory drops/waste management, CSV data import, advanced analytics, 
    and production-ready error handling. Features JWT-based authentication with role-based 
    access control, inventory management, sales processing, business intelligence capabilities,
    and regulatory compliance tools.
    
    **Complete API Coverage:** 40 professional endpoints across 9 business categories
    including Authentication, User Management, Customer Relations, Product Management, 
    Sales Processing, Business Intelligence, Food Waste Management, Test Data Management,
    and System Health monitoring.
servers:
  - url: http://localhost:3000/bitetrack
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Seller:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        dateOfBirth: { type: string, format: date }
        role: { type: string, enum: [user, admin, superadmin] }
        createdBy: { type: string }
        activatedAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [firstName, lastName, email, dateOfBirth, role]

    PendingSeller:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        dateOfBirth: { type: string, format: date }
        createdAt: { type: string, format: date-time }
        createdBy: { type: string }
        activatedAt: { type: string, format: date-time, nullable: true }
      required: [firstName, lastName, email, dateOfBirth]

    Customer:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phoneNumber: { type: string }
        email: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        lastTransaction: { type: string, format: date-time, nullable: true }
      required: [firstName, lastName, phoneNumber]

    Product:
      type: object
      properties:
        id: { type: string }
        productName: { type: string }
        description: { type: string, nullable: true }
        count: { type: integer, minimum: 0 }
        price: { type: number, minimum: 0 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [productName, count, price]

    Sale:
      type: object
      properties:
        id: { type: string }
        customerId: { type: string }
        sellerId: { type: string }
        products:
          type: array
          items:
            type: object
            properties:
              productId: { type: string }
              quantity: { type: integer, minimum: 1 }
              priceAtSale: { type: number, minimum: 0 }
            required: [productId, quantity, priceAtSale]
        totalAmount: { type: number, minimum: 0 }
        amountPaid: { type: number, minimum: 0 }
        settled: { type: boolean, description: "True if fully paid" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        # CSV Import specific fields
        originalCreatedAt: 
          type: string
          format: date-time
          nullable: true
          description: "Original sale date from imported data (for historical accuracy)"
        importedAt:
          type: string
          format: date-time
          nullable: true
          description: "Timestamp when this sale was imported from external source"
        externalSale:
          type: boolean
          default: false
          description: "True if this sale was imported from external system"
        importBatch:
          type: string
          nullable: true
          description: "Batch identifier for tracking imported sales"
        receiptUrl:
          type: string
          nullable: true
          description: "URL to receipt or proof of sale"
        paymentMethod:
          type: string
          nullable: true
          description: "Payment method used for the transaction"
      required:
        [customerId, sellerId, products, totalAmount, amountPaid, settled]

    SaleWithPopulatedFields:
      type: object
      properties:
        id: { type: string }
        customerId:
          type: object
          properties:
            _id: { type: string }
            firstName: { type: string }
            lastName: { type: string }
            email: { type: string, format: email }
          required: [_id, firstName, lastName, email]
        sellerId:
          type: object
          properties:
            _id: { type: string }
            firstName: { type: string }
            lastName: { type: string }
            email: { type: string, format: email }
          required: [_id, firstName, lastName, email]
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: object
                properties:
                  _id: { type: string }
                  name: { type: string }
                  price: { type: number, minimum: 0 }
                required: [_id, name, price]
              quantity: { type: integer, minimum: 1 }
              priceAtSale: { type: number, minimum: 0 }
            required: [productId, quantity, priceAtSale]
        totalAmount: { type: number, minimum: 0 }
        amountPaid: { type: number, minimum: 0 }
        settled: { type: boolean, description: "True if fully paid" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        [customerId, sellerId, products, totalAmount, amountPaid, settled]

    PaginationMetadata:
      type: object
      properties:
        currentPage: { type: integer, minimum: 1 }
        totalPages: { type: integer, minimum: 0 }
        totalTransactions: { type: integer, minimum: 0 }
        limit: { type: integer, minimum: 1, maximum: 100 }
        hasNextPage: { type: boolean }
        hasPrevPage: { type: boolean }
      required: [currentPage, totalPages, totalTransactions, limit, hasNextPage, hasPrevPage]

    CustomerTransactionsResponse:
      type: object
      properties:
        customer: { $ref: "#/components/schemas/Customer" }
        transactions:
          type: array
          items: { $ref: "#/components/schemas/SaleWithPopulatedFields" }
        pagination: { $ref: "#/components/schemas/PaginationMetadata" }
      required: [customer, transactions, pagination]

    SalesPaginationMetadata:
      type: object
      properties:
        currentPage: { type: integer, minimum: 1 }
        totalPages: { type: integer, minimum: 0 }
        totalSales: { type: integer, minimum: 0 }
        limit: { type: integer, minimum: 1, maximum: 100 }
        hasNextPage: { type: boolean }
        hasPrevPage: { type: boolean }
      required: [currentPage, totalPages, totalSales, limit, hasNextPage, hasPrevPage]

    SalesFilters:
      type: object
      properties:
        customerId: { type: string }
        sellerId: { type: string }
        settled: { type: boolean }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        dateField: { type: string, enum: [createdAt, updatedAt] }
        sort: { type: string }

    SalesListResponse:
      type: object
      properties:
        sales:
          type: array
          items: { $ref: "#/components/schemas/SaleWithPopulatedFields" }
        pagination: { $ref: "#/components/schemas/SalesPaginationMetadata" }
        filters: { $ref: "#/components/schemas/SalesFilters" }
      required: [sales, pagination, filters]

    PasswordResetToken:
      type: object
      properties:
        token: { type: string }
        sellerId: { type: string }
        expiresAt: { type: string, format: date-time }
      required: [token, sellerId, expiresAt]

    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        statusCode: { type: integer }
        timestamp: { type: string, format: date-time }
      required: [error, message, statusCode, timestamp]

    ValidationError:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }
        statusCode: { type: integer }
        timestamp: { type: string, format: date-time }
      required: [error, message, statusCode, timestamp]
        
    # CSV Import specific schemas
    CSVImportSummary:
      type: object
      properties:
        totalRows: { type: integer, minimum: 0 }
        imported: { type: integer, minimum: 0 }
        skipped: { type: integer, minimum: 0 }
        importBatchId: { type: string }
      required: [totalRows, imported, skipped, importBatchId]
        
    CSVImportError:
      type: object
      properties:
        field: { type: string }
        message: { type: string }
      required: [field, message]
        
    CSVSkippedRow:
      type: object
      properties:
        row: { type: integer, minimum: 1 }
        data: { type: object }
        skip_reason: { type: string }
        errors: 
          type: array
          items: { $ref: "#/components/schemas/CSVImportError" }
      required: [row, data, skip_reason, errors]
        
    CSVImportResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        summary: { $ref: "#/components/schemas/CSVImportSummary" }
        importedSales:
          type: array
          items: { type: object }
        skippedRows:
          type: array
          items: { $ref: "#/components/schemas/CSVSkippedRow" }
        warnings:
          type: array
          items: { type: string }
        truncated:
          type: object
          properties:
            importedSales: { type: boolean }
            skippedRows: { type: boolean }
      required: [success, message, summary, importedSales, skippedRows, warnings, truncated]

    InventoryDrop:
      type: object
      properties:
        id: { type: string }
        productId:
          type: object
          properties:
            id: { type: string }
            productName: { type: string }
            price: { type: number }
        productName: { type: string }
        category: { type: string, nullable: true }
        quantityDropped: { type: integer, minimum: 1 }
        originalQuantity: { type: integer, minimum: 0 }
        remainingQuantity: { type: integer, minimum: 0 }
        pricePerUnit: { type: number, minimum: 0 }
        totalValueLost: { type: number, minimum: 0 }
        reason:
          type: string
          enum: [expired, end_of_day, quality_issue, damaged, contaminated, overproduction, other]
        notes: { type: string, maxLength: 500, nullable: true }
        droppedBy:
          type: object
          properties:
            id: { type: string }
            firstName: { type: string }
            lastName: { type: string }
            email: { type: string }
        droppedAt: { type: string, format: date-time }
        canBeUndone: { type: boolean }
        undoExpiresAt: { type: string, format: date-time, nullable: true }
        isUndone: { type: boolean, default: false }
        undoneBy:
          type: object
          nullable: true
          properties:
            id: { type: string }
            firstName: { type: string }
            lastName: { type: string }
        undoneAt: { type: string, format: date-time, nullable: true }
        undoReason: { type: string, maxLength: 300, nullable: true }
        productionDate: { type: string, format: date-time, nullable: true }
        expirationDate: { type: string, format: date-time, nullable: true }
        batchId: { type: string, nullable: true }
        # Virtual fields
        dropPercentage: { type: string, description: "Percentage of inventory dropped" }
        undoAvailable: { type: boolean, description: "Whether drop can still be undone" }
        undoTimeRemaining: { type: integer, description: "Minutes remaining for undo" }
        isPartialDrop: { type: boolean, description: "True if not all inventory was dropped" }
        daysSinceProduction: { type: integer, nullable: true, description: "Days since production date" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        [id, productId, productName, quantityDropped, originalQuantity, remainingQuantity, pricePerUnit, totalValueLost, reason, droppedBy, droppedAt]

    InventoryDropRequest:
      type: object
      properties:
        productId: { type: string, description: "MongoDB ObjectId of the product" }
        quantityToDrop: { type: integer, minimum: 1, description: "Number of units to drop" }
        reason:
          type: string
          enum: [expired, end_of_day, quality_issue, damaged, contaminated, overproduction, other]
          default: end_of_day
          description: "Reason for dropping inventory"
        notes: { type: string, maxLength: 500, description: "Additional context (optional)" }
        productionDate: { type: string, format: date-time, description: "When product was made (optional)" }
        expirationDate: { type: string, format: date-time, description: "Product expiration date (optional)" }
        batchId: { type: string, maxLength: 100, description: "Batch/lot identifier (optional)" }
      required: [productId, quantityToDrop]

    InventoryDropResponse:
      type: object
      properties:
        message: { type: string }
        drop: { $ref: "#/components/schemas/InventoryDrop" }
        updatedProduct:
          type: object
          properties:
            id: { type: string }
            productName: { type: string }
            previousQuantity: { type: integer }
            newQuantity: { type: integer }
            quantityDropped: { type: integer }
        undoInfo:
          type: object
          properties:
            canUndo: { type: boolean }
            undoExpiresAt: { type: string, format: date-time }
            timeRemainingMinutes: { type: integer }
      required: [message, drop, updatedProduct, undoInfo]

    UndoDropRequest:
      type: object
      properties:
        undoReason: { type: string, maxLength: 300, description: "Reason for undoing the drop (optional)" }

    UndoDropResponse:
      type: object
      properties:
        message: { type: string }
        drop: { $ref: "#/components/schemas/InventoryDrop" }
        restoredProduct:
          type: object
          properties:
            id: { type: string }
            productName: { type: string }
            previousQuantity: { type: integer }
            newQuantity: { type: integer }
            quantityRestored: { type: integer }
      required: [message, drop, restoredProduct]

    InventoryDropsListResponse:
      type: object
      properties:
        drops:
          type: array
          items: { $ref: "#/components/schemas/InventoryDrop" }
        pagination:
          type: object
          properties:
            currentPage: { type: integer, minimum: 1 }
            totalPages: { type: integer, minimum: 0 }
            totalCount: { type: integer, minimum: 0 }
            hasNextPage: { type: boolean }
            hasPrevPage: { type: boolean }
      required: [drops, pagination]

    UndoableDropsResponse:
      type: object
      properties:
        message: { type: string }
        undoableDrops:
          type: array
          items: { $ref: "#/components/schemas/InventoryDrop" }
        currentTime: { type: string, format: date-time }
      required: [message, undoableDrops, currentTime]

    DropAnalyticsResponse:
      type: object
      properties:
        period:
          type: object
          properties:
            startDate: { type: string, format: date-time }
            endDate: { type: string, format: date-time }
            durationDays: { type: integer }
        summary:
          type: object
          properties:
            totalQuantityDropped: { type: integer }
            totalValueLost: { type: number }
            totalDropCount: { type: integer }
            avgValuePerDrop: { type: number }
        analyticsByReason:
          type: array
          items:
            type: object
            properties:
              _id: { type: string }
              products:
                type: array
                items:
                  type: object
                  properties:
                    productId: { type: string }
                    productName: { type: string }
                    totalQuantityDropped: { type: integer }
                    totalValueLost: { type: number }
                    dropCount: { type: integer }
              totalQuantityDropped: { type: integer }
              totalValueLost: { type: number }
              totalDropCount: { type: integer }
        todaysSummary:
          type: array
          items:
            type: object
            properties:
              reason: { type: string }
              totalQuantity: { type: integer }
              totalValue: { type: number }
              dropCount: { type: integer }
              uniqueProducts: { type: integer }
      required: [period, summary, analyticsByReason, todaysSummary]

    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
      required: [email, password]

    ActivateRequest:
      type: object
      properties:
        email: { type: string, format: email }
        dateOfBirth: { type: string, format: date }
        lastName: { type: string }
        password:
          {
            type: string,
            minLength: 8,
            pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
          }
      required: [email, dateOfBirth, lastName, password]

    TokenResponse:
      type: object
      properties:
        token: { type: string }
        seller: { $ref: "#/components/schemas/Seller" }
      required: [token, seller]

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      summary: Login as seller
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
      responses:
        "200":
          description: JWT token and seller info
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TokenResponse" }
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /auth/activate:
    post:
      summary: Activate pending seller account
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ActivateRequest" }
      responses:
        "201":
          description: Seller activated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Seller" }
        "404":
          description: Pending seller not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /auth/recover:
    post:
      summary: Initiate password recovery (superadmin only)
      tags: [Authentication]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sellerId]
              properties:
                sellerId: { type: string }
      responses:
        "200":
          description: Password reset token generated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PasswordResetToken" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/reset:
    post:
      summary: Reset password with token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, email, dateOfBirth, newPassword]
              properties:
                token: { type: string }
                email: { type: string, format: email }
                dateOfBirth: { type: string, format: date }
                newPassword: { type: string, minLength: 8 }
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        "400":
          description: Invalid token or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/seller-status:
    get:
      summary: Check seller account status by email
      tags: [Authentication]
      description: |
        Check if an email address has an active or pending seller account.
        Useful for client-side login flows to determine whether to show
        activation form or regular login.
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          description: Email address to check
      responses:
        "200":
          description: Account status found
          content:
            application/json:
              schema:
                type: object
                properties:
                  email: { type: string, format: email }
                  status:
                    type: string
                    enum: [active, pending]
                    description: "'active' for existing sellers, 'pending' for unactivated accounts"
                required: [email, status]
        "404":
          description: No account found for this email
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Validation error (invalid email format)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  # Seller Management Endpoints
  /sellers:
    get:
      summary: List all sellers (admin/superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of sellers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Seller" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sellers/pending:
    get:
      summary: List all pending sellers (superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve all pending seller accounts that have not yet been activated.
        Only accessible by superadmin users. Returns pending sellers sorted by creation date 
        (most recent first) with information about who created each pending account.
      responses:
        "200":
          description: List of pending sellers
          content:
            application/json:
              schema:
                type: object
                required: [count, pendingSellers]
                properties:
                  count:
                    type: integer
                    minimum: 0
                    description: Total number of pending sellers
                  pendingSellers:
                    type: array
                    items:
                      type: object
                      required: [_id, firstName, lastName, email, dateOfBirth, createdAt, createdBy]
                      properties:
                        _id: { type: string, description: "Unique identifier for the pending seller" }
                        firstName: { type: string }
                        lastName: { type: string }
                        email: { type: string, format: email }
                        dateOfBirth: { type: string, format: date }
                        createdAt: { type: string, format: date-time }
                        createdBy:
                          type: object
                          nullable: true
                          description: "Information about the admin who created this pending seller"
                          properties:
                            _id: { type: string }
                            firstName: { type: string }
                            lastName: { type: string }
                            email: { type: string, format: email }
                            role: { type: string, enum: [admin, superadmin] }
                          required: [_id, firstName, lastName, email, role]
              example:
                count: 2
                pendingSellers:
                  - _id: "507f1f77bcf86cd799439011"
                    firstName: "John"
                    lastName: "Doe"
                    email: "john.doe@example.com"
                    dateOfBirth: "1990-05-15"
                    createdAt: "2023-10-09T10:30:00.000Z"
                    createdBy:
                      _id: "507f1f77bcf86cd799439012"
                      firstName: "Admin"
                      lastName: "User"
                      email: "admin@bitetrack.com"
                      role: "superadmin"
                  - _id: "507f1f77bcf86cd799439013"
                    firstName: "Jane"
                    lastName: "Smith"
                    email: "jane.smith@example.com"
                    dateOfBirth: "1985-08-20"
                    createdAt: "2023-10-08T14:20:00.000Z"
                    createdBy:
                      _id: "507f1f77bcf86cd799439012"
                      firstName: "Admin"
                      lastName: "User"
                      email: "admin@bitetrack.com"
                      role: "superadmin"
        "401":
          description: Authentication required
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Insufficient permissions - superadmin role required
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          description: Internal server error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    post:
      summary: Create pending seller (admin/superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, email, dateOfBirth]
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                dateOfBirth: { type: string, format: date }
      responses:
        "201":
          description: Pending seller created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PendingSeller" }
        "400":
          description: Validation error or email already exists
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sellers/{id}:
    patch:
      summary: Self-update seller information
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                dateOfBirth: { type: string, format: date }
                oldPassword: { type: string }
                newPassword: { type: string, minLength: 8 }
      responses:
        "200":
          description: Seller updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Seller" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Unauthorized or invalid old password
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Deactivate seller (superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Seller deactivated
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sellers/{id}/role:
    patch:
      summary: Promote/demote seller role (superadmin only)
      tags: [Sellers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role: { type: string, enum: [user, admin, superadmin] }
      responses:
        "200":
          description: Role updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Seller" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Customer Endpoints
  /customers:
    get:
      summary: List all customers
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Customer" }
    post:
      summary: Create customer
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, phoneNumber]
              properties:
                firstName: { type: string }
                lastName: { type: string }
                phoneNumber: { type: string }
                email: { type: string, format: email }
      responses:
        "201":
          description: Customer created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /customers/{id}:
    patch:
      summary: Update customer
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                phoneNumber: { type: string }
                email: { type: string, format: email }
      responses:
        "200":
          description: Customer updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Customer" }
        "404":
          description: Customer not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Remove customer
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Customer removed
        "404":
          description: Customer not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /customers/{id}/transactions:
    get:
      summary: Get customer transaction history
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve a customer's transaction history with pagination and filtering options.
        Returns customer information along with a paginated list of their transactions.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
          description: Customer ID
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number for pagination
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Number of transactions per page
        - name: settled
          in: query
          schema: { type: boolean }
          description: Filter by settlement status (true for paid, false for unpaid)
      responses:
        "200":
          description: Customer transaction history
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CustomerTransactionsResponse" }
        "400":
          description: Invalid pagination parameters
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Customer not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /customers/import:
    post:
      summary: Import customers from CSV file
      tags: [Customers]
      security: [{ bearerAuth: [] }]
      description: |
        Bulk import customers from a CSV file with comprehensive validation and error handling.
        Supports detailed reporting of successful imports and failures with conflict detection.
        
        **CSV Format Required:**
        - firstName,lastName,phoneNumber,email
        
        **Features:**
        - Duplicate phone number detection
        - Email uniqueness validation
        - Detailed error reporting per row
        - Non-blocking processing (continues on individual row failures)
        - Response limiting for large imports
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [csvFile]
              properties:
                csvFile:
                  type: string
                  format: binary
                  description: CSV file containing customer data (max 5MB)
      responses:
        "200":
          description: CSV import completed with results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      totalRows: { type: integer }
                      successful: { type: integer }
                      failed: { type: integer }
                  successfulImports:
                    type: array
                    items: { $ref: "#/components/schemas/Customer" }
                  failures:
                    type: array
                    items:
                      type: object
                      properties:
                        row: { type: integer }
                        data: { type: object }
                        errors:
                          type: array
                          items:
                            type: object
                            properties:
                              field: { type: string }
                              message: { type: string }
                  truncated:
                    type: object
                    properties:
                      successfulImports: { type: boolean }
                      failures: { type: boolean }
                required: [success, message, summary, successfulImports, failures, truncated]
        "400":
          description: No file provided or invalid file format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "413":
          description: File size exceeds 5MB limit
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Product Endpoints
  /products:
    get:
      summary: List all products
      tags: [Products]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Product" }
    post:
      summary: Create product
      tags: [Products]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productName, count, price]
              properties:
                productName: { type: string }
                description: { type: string }
                count: { type: integer, minimum: 0 }
                price: { type: number, minimum: 0 }
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /products/{id}:
    patch:
      summary: Update product details or inventory
      tags: [Products]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName: { type: string }
                description: { type: string }
                count: { type: integer, minimum: 0 }
                price: { type: number, minimum: 0 }
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }
        "404":
          description: Product not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      summary: Remove product
      tags: [Products]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Product removed
        "404":
          description: Product not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Sales Endpoints
  /sales:
    get:
      summary: List sales with filtering, date range, pagination, and sorting
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve sales with comprehensive filtering options including date ranges,
        pagination, and sorting capabilities. Returns populated customer, seller,
        and product information along with pagination metadata.
      parameters:
        - name: customerId
          in: query
          schema: { type: string }
          description: Filter by customer ID
        - name: sellerId
          in: query
          schema: { type: string }
          description: Filter by seller ID
        - name: settled
          in: query
          schema: { type: boolean }
          description: Filter by settlement status (true for paid, false for unpaid)
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Start date for filtering (ISO 8601 format)
          example: "2024-01-01T00:00:00.000Z"
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: End date for filtering (ISO 8601 format)
          example: "2024-01-31T23:59:59.999Z"
        - name: dateField
          in: query
          schema: { type: string, enum: [createdAt, updatedAt], default: createdAt }
          description: Date field to filter by
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number for pagination
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
          description: Number of records per page
        - name: sort
          in: query
          schema: { type: string }
          description: Sort field and direction (prefix with '-' for descending)
          example: "-createdAt"
      responses:
        "200":
          description: Sales list with pagination and populated references
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SalesListResponse" }
        "400":
          description: Invalid parameters or date format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
    post:
      summary: Create a sale (transactional)
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [customerId, products, amountPaid]
              properties:
                customerId: { type: string }
                products:
                  type: array
                  items:
                    type: object
                    required: [productId, quantity]
                    properties:
                      productId: { type: string }
                      quantity: { type: integer, minimum: 1 }
                amountPaid: { type: number, minimum: 0 }
      responses:
        "201":
          description: Sale created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Sale" }
        "400":
          description: Insufficient inventory or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  /sales/import:
    post:
      summary: Import sales data from CSV file
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      description: |
        Import sales data from CSV file with comprehensive validation and error handling.
        Supports customer/product resolution, duplicate detection, and batch tracking.
        
        **CSV Format Required:**
        - Date,Contact Name,Contact Phone,Contact Email,Product,Quantity,Unit Price,Total Amount,Amount Paid
        
        **Features:**
        - Automatic phone number normalization (supports various formats)
        - Customer resolution by phone or email
        - Product lookup by name (case-insensitive)
        - Duplicate detection based on customer + timestamp
        - Historical date preservation with originalCreatedAt
        - Batch tracking for audit purposes
        - Comprehensive error reporting with skip reasons
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [csvFile]
              properties:
                csvFile:
                  type: string
                  format: binary
                  description: CSV file containing sales data (max 10MB)
      responses:
        "200":
          description: CSV import completed with results
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CSVImportResponse" }
        "400":
          description: No file provided or invalid file format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "413":
          description: File size exceeds 10MB limit
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sales/{id}:
    get:
      summary: Get sale details
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Sale details
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Sale" }
        "404":
          description: Sale not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /sales/{id}/settle:
    patch:
      summary: Settle (update payment for) a sale
      tags: [Sales]
      security: [{ bearerAuth: [] }]
      description: |
        Update the payment amount for a sale and automatically calculate settlement status.
        The sale will be marked as settled if amountPaid >= totalAmount.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
          description: Sale ID to settle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amountPaid]
              properties:
                amountPaid:
                  type: number
                  minimum: 0
                  description: New payment amount for the sale
      responses:
        "200":
          description: Sale payment updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Sale" }
        "404":
          description: Sale not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Invalid payment amount
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }

  # Reporting Endpoints
  /reporting/sales/analytics:
    get:
      summary: Get comprehensive sales analytics
      tags: [Reporting]
      security: [{ bearerAuth: [] }]
      description: |
        Generate comprehensive sales analytics for a given time period.
        Includes totals, averages, top products, customer analytics, time-series data, and settlement statistics.
      parameters:
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Start date for filtering (ISO 8601 format)
          example: "2024-01-01T00:00:00.000Z"
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: End date for filtering (ISO 8601 format)
          example: "2024-01-31T23:59:59.999Z"
        - name: dateField
          in: query
          schema: { type: string, enum: [createdAt, updatedAt], default: createdAt }
          description: Date field to filter by
        - name: groupBy
          in: query
          schema: { type: string, enum: [hour, day, week, month, year], default: day }
          description: Time grouping for time-series data
      responses:
        "200":
          description: Sales analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  period:
                    type: object
                    properties:
                      startDate: { type: string, format: date-time, nullable: true }
                      endDate: { type: string, format: date-time, nullable: true }
                      dateField: { type: string }
                      groupBy: { type: string }
                  summary:
                    type: object
                    properties:
                      totalSales: { type: integer }
                      totalRevenue: { type: number }
                      totalAmountPaid: { type: number }
                      averageOrderValue: { type: number }
                      averageItemsPerOrder: { type: number }
                  timeSeries:
                    type: array
                    items:
                      type: object
                      properties:
                        _id: { type: object }
                        salesCount: { type: integer }
                        revenue: { type: number }
                        averageOrderValue: { type: number }
                  topProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        productName: { type: string }
                        currentPrice: { type: number }
                        totalQuantitySold: { type: integer }
                        totalRevenue: { type: number }
                        salesCount: { type: integer }
                        averagePrice: { type: number }
                  customerAnalytics:
                    type: object
                    properties:
                      uniqueCustomers: { type: integer }
                      averageCustomerSpent: { type: number }
                      averageOrdersPerCustomer: { type: number }
                  paymentAnalytics:
                    type: object
                    properties:
                      settled:
                        type: object
                        properties:
                          count: { type: integer }
                          totalAmount: { type: number }
                          totalPaid: { type: number }
                      unsettled:
                        type: object
                        properties:
                          count: { type: integer }
                          totalAmount: { type: number }
                          totalPaid: { type: number }
        "400":
          description: Invalid date format or parameters
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /reporting/sales/export:
    get:
      summary: Export sales data as CSV
      tags: [Reporting]
      security: [{ bearerAuth: [] }]
      description: |
        Export sales data as CSV file with various formats and filtering options.
        Supports detailed line items, summary per sale, or product performance exports.
      parameters:
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Start date for filtering (ISO 8601 format)
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: End date for filtering (ISO 8601 format)
        - name: dateField
          in: query
          schema: { type: string, enum: [createdAt, updatedAt], default: createdAt }
          description: Date field to filter by
        - name: format
          in: query
          schema: { type: string, enum: [detailed, summary, products], default: detailed }
          description: |
            Export format:
            - detailed: Individual product line items with full transaction details
            - summary: One row per sale with aggregate information
            - products: Product performance metrics and sales statistics
        - name: customerId
          in: query
          schema: { type: string }
          description: Filter by customer ID
        - name: sellerId
          in: query
          schema: { type: string }
          description: Filter by seller ID
        - name: settled
          in: query
          schema: { type: boolean }
          description: Filter by settlement status
      responses:
        "200":
          description: CSV file download
          content:
            text/csv:
              schema:
                type: string
              example: |
                "Sale ID","Date","Customer Name","Product Name","Quantity","Unit Price","Line Total"
                "507f1f77bcf86cd799439041","2024-01-15","John Doe","Club Sandwich",2,12.99,25.98
        "400":
          description: Invalid parameters or date format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          description: CSV generation failed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Test Data Management Endpoints (Development/Testing Only)
  /test-data/status:
    get:
      summary: Get test data statistics and counts
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Get comprehensive statistics about current test data in the database.
        Only available in non-production environments.
      responses:
        "200":
          description: Test data statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment: { type: string }
                  timestamp: { type: string, format: date-time }
                  counts:
                    type: object
                    properties:
                      customers: { type: integer }
                      products: { type: integer }
                      sales: { type: integer }
                      pendingSellers: { type: integer }
                  salesStatistics:
                    type: object
                    properties:
                      totalSalesValue: { type: number }
                      averageOrderValue: { type: number }
                      settledSales: { type: integer }
                      unsettledSales: { type: integer }
                  recentSales:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        customer: { type: string }
                        seller: { type: string }
                        totalAmount: { type: number }
                        settled: { type: boolean }
                        createdAt: { type: string, format: date-time }
        "403":
          description: Forbidden (disabled in production or insufficient permissions)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /test-data/populate:
    post:
      summary: Populate database with test data
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Populate the database with realistic test data from JSON templates.
        Supports different presets and optional cleanup before population.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                preset:
                  type: string
                  enum: [minimal, dev, full, bulk]
                  default: minimal
                  description: Size of the test dataset
                cleanBefore:
                  type: boolean
                  default: false
                  description: Clean existing data before populating
                verbose:
                  type: boolean
                  default: false
                  description: Enable detailed logging
      responses:
        "201":
          description: Test data populated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      preset: { type: string }
                      timestamp: { type: string, format: date-time }
                      requestedBy: { type: string }
                      requestedByUser: { type: string }
                      counts:
                        type: object
                        properties:
                          customers: { type: integer }
                          products: { type: integer }
                          sales: { type: integer }
                          pendingSellers: { type: integer }
                      sampleIds:
                        type: object
                        properties:
                          firstCustomer: { type: string }
                          firstProduct: { type: string }
                          firstSale: { type: string }
                      statistics:
                        type: object
                        properties:
                          totalSalesValue: { type: number }
                          averageOrderValue: { type: number }
                          settledSales: { type: integer }
                          unsettledSales: { type: integer }
        "400":
          description: Invalid preset or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Forbidden (disabled in production or insufficient permissions)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /test-data/clean:
    delete:
      summary: Clean/remove test data from database
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Selectively remove test data from the database with preservation options.
        Requires explicit confirmation for safety.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [confirmClean]
              properties:
                confirmClean:
                  type: boolean
                  description: Must be true to proceed (safety measure)
                preserveData:
                  type: array
                  items:
                    type: string
                    enum: [customers, products, sales, pendingSellers]
                  description: Array of data types to preserve
      responses:
        "200":
          description: Test data cleaned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      timestamp: { type: string, format: date-time }
                      requestedBy: { type: string }
                      requestedByUser: { type: string }
                      deletedCounts:
                        type: object
                        properties:
                          sales: { type: integer }
                          customers: { type: integer }
                          products: { type: integer }
                          pendingSellers: { type: integer }
                      preserved:
                        type: array
                        items: { type: string }
        "400":
          description: Missing confirmation or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Forbidden (disabled in production or insufficient permissions)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /test-data/reset:
    post:
      summary: Reset database to specific test scenario (SuperAdmin only)
      tags: [Test Data Management]
      security: [{ bearerAuth: [] }]
      description: |
        Reset the entire database to a specific test scenario.
        This is the most destructive operation and requires SuperAdmin privileges.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [confirmReset]
              properties:
                scenario:
                  type: string
                  enum: [clean, minimal, dev, full]
                  default: clean
                  description: Target scenario for reset
                confirmReset:
                  type: boolean
                  description: Must be true to proceed (safety measure)
      responses:
        "200":
          description: Database reset completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  summary:
                    type: object
                    properties:
                      scenario: { type: string }
                      message: { type: string }
                      timestamp: { type: string, format: date-time }
                      requestedBy: { type: string }
                      requestedByUser: { type: string }
                      counts:
                        type: object
                        properties:
                          customers: { type: integer }
                          products: { type: integer }
                          sales: { type: integer }
                          pendingSellers: { type: integer }
        "400":
          description: Missing confirmation or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Forbidden (disabled in production, insufficient permissions, or not SuperAdmin)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Inventory Drop Endpoints (Food Waste Management)
  /inventory-drops:
    post:
      summary: Drop inventory for a product (admin/superadmin only)
      tags: [Inventory Drops]
      security: [{ bearerAuth: [] }]
      description: |
        Drop inventory for expired, damaged, or end-of-day waste. Creates permanent audit record 
        and updates product inventory atomically. Only accessible by admin and superadmin users.
        
        **Features:**
        - Atomic transaction processing (inventory + audit record)
        - 8-hour undo window for operational error recovery
        - Comprehensive financial impact tracking
        - Food safety compliance with batch/lot tracking
        - Regulatory audit trail for health department requirements
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/InventoryDropRequest" }
      responses:
        "201":
          description: Inventory dropped successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/InventoryDropResponse" }
        "400":
          description: Validation error or insufficient inventory
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Insufficient permissions (admin/superadmin required)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Product not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    get:
      summary: List inventory drops with filtering and pagination
      tags: [Inventory Drops]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve inventory drops with comprehensive filtering and pagination options.
        Only accessible by admin and superadmin users.
      parameters:
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number for pagination
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Number of records per page
        - name: productId
          in: query
          schema: { type: string }
          description: Filter by specific product ID
        - name: reason
          in: query
          schema: 
            type: string
            enum: [expired, end_of_day, quality_issue, damaged, contaminated, overproduction, other]
          description: Filter by drop reason
        - name: droppedBy
          in: query
          schema: { type: string }
          description: Filter by user who dropped the inventory
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Filter drops after this date (ISO 8601)
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: Filter drops before this date (ISO 8601)
        - name: includeUndone
          in: query
          schema: { type: boolean, default: false }
          description: Include undone drops in results
      responses:
        "200":
          description: List of inventory drops with pagination
          content:
            application/json:
              schema: { $ref: "#/components/schemas/InventoryDropsListResponse" }
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /inventory-drops/undoable:
    get:
      summary: Get drops that can still be undone (within 8-hour window)
      tags: [Inventory Drops]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve inventory drops that are still within the 8-hour undo window.
        Useful for showing recovery options to users who may have made mistakes.
      parameters:
        - name: userId
          in: query
          schema: { type: string }
          description: Filter by specific user (optional)
      responses:
        "200":
          description: List of drops that can be undone
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UndoableDropsResponse" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /inventory-drops/analytics:
    get:
      summary: Get comprehensive inventory drop analytics and cost reporting
      tags: [Inventory Drops]
      security: [{ bearerAuth: [] }]
      description: |
        Generate comprehensive waste analytics and cost reporting for business intelligence.
        Includes summaries by reason, product performance, and financial impact analysis.
      parameters:
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
          description: Analytics period start date (default: 30 days ago)
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
          description: Analytics period end date (default: now)
        - name: productId
          in: query
          schema: { type: string }
          description: Filter by specific product
        - name: reason
          in: query
          schema: 
            type: string
            enum: [expired, end_of_day, quality_issue, damaged, contaminated, overproduction, other]
          description: Filter by drop reason
        - name: droppedBy
          in: query
          schema: { type: string }
          description: Filter by specific user
      responses:
        "200":
          description: Comprehensive drop analytics and cost reporting
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DropAnalyticsResponse" }
        "400":
          description: Invalid date format or parameters
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /inventory-drops/{dropId}:
    get:
      summary: Get detailed information about a specific inventory drop
      tags: [Inventory Drops]
      security: [{ bearerAuth: [] }]
      description: |
        Retrieve detailed information about a specific inventory drop including
        undo availability and time remaining.
      parameters:
        - name: dropId
          in: path
          required: true
          schema: { type: string }
          description: Inventory drop ID
      responses:
        "200":
          description: Detailed inventory drop information
          content:
            application/json:
              schema:
                type: object
                properties:
                  drop: { $ref: "#/components/schemas/InventoryDrop" }
                  canUndo: { type: boolean }
                  timeRemainingForUndo: { type: integer, description: "Minutes remaining for undo" }
                required: [drop, canUndo, timeRemainingForUndo]
        "404":
          description: Inventory drop not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /inventory-drops/{dropId}/undo:
    post:
      summary: Undo an inventory drop (within 8-hour window)
      tags: [Inventory Drops]
      security: [{ bearerAuth: [] }]
      description: |
        Undo an inventory drop within the 8-hour recovery window. Restores inventory 
        to the product and marks the drop as undone for audit purposes.
        
        **Business Rules:**
        - Must be within 8 hours of original drop
        - Drop must not already be undone
        - Product must still exist
        - Atomic operation (inventory + audit record)
      parameters:
        - name: dropId
          in: path
          required: true
          schema: { type: string }
          description: Inventory drop ID to undo
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UndoDropRequest" }
      responses:
        "200":
          description: Inventory drop undone successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UndoDropResponse" }
        "400":
          description: Cannot undo drop (expired, already undone, or invalid)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Drop record or associated product not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # API Overview & Health Check Endpoints
  /:
    get:
      summary: API overview and capabilities
      tags: [Health]
      description: |
        Get comprehensive information about the BiteTrack API including capabilities,
        documentation links, and quick start guide. No authentication required.
      responses:
        "200":
          description: API overview and capabilities
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  version: { type: string }
                  server:
                    type: object
                    properties:
                      host: { type: string }
                      port: { type: integer }
                      environment: { type: string }
                  documentation:
                    type: object
                    properties:
                      interactive: { type: string, description: "Swagger UI URL" }
                      json: { type: string, description: "OpenAPI JSON spec URL" }
                      static: { type: string, description: "Static documentation URL" }
                  capabilities:
                    type: object
                    properties:
                      endpoints: { type: string }
                      categories: { type: string }
                      features: 
                        type: array
                        items: { type: string }
                  quickStart:
                    type: object
                    properties:
                      step1: { type: string }
                      step2: { type: string }
                      step3: { type: string }
                      step4: { type: string }
                  health: { type: string, description: "Health check endpoint URL" }
                required: [message, version, server, documentation, capabilities, quickStart, health]
  
  /health:
    get:
      summary: API health check
      tags: [Health]
      description: |
        Check API server status and connectivity. No authentication required.
        Returns server status, uptime, and current timestamp.
      responses:
        "200":
          description: Server is healthy and operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "OK" }
                  timestamp: { type: string, format: date-time }
                  uptime: { type: number, description: "Server uptime in seconds" }
                required: [status, timestamp, uptime]
